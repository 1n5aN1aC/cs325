Proof for MergeCount:

Pre-explanation: Merge&Count works by simply running mergesort on the list, and counting how many times elements are inverted.  Mergesort works (code actually flows in the other direction, as it is recursive, however it makes more sense conceptually this way) by splitting the Length N list into n separate elements, then continues to combine those into n/2 lists of 2n length.  It does this by comparing the existing 'lists' (singlets) and moving the smallest of the first elements of either list into the new list, thereby sorting them.

Proof by contradiction:
    Assume that one of the resulting lists is incorrect.  If one of the lists obtained by combining smaller lists was not sorted, then mergesort would no longer work, and therefore the inversion counting would also be incorrect.  The only way for this to happen is for the smaller sub-lists to be incorrectly sorted, (since we assume they are sorted, and only look at the first elements in either) and the only way for those to be incorrectly sorted is if exactly what we are talking about right now is true.  Eventually we get to the base case, where each sub-list is only 1 element, but it is impossible to mess this up, since there is no way for a single-element list to not be sorted.


Proof for Naïve Divide and Conquer:
    Pre-explanation:  The Naïve divide & Conquer which we were tasked to develop is fairly simple once you know how it works:  It splits the list into 2 halves, then brute forces the inversions between the first half and the second half, but NOT inversions within any one half.  It then continues recursively by calling itself on the 2 resulting half-lists.  Eventually each list contains either 1 or 0 elements, at which point, there are no inversions in that list, and it returns.

    Proof by contradiction:
        Assume that the result of the master divide & conquer is incorrect.  There are only 2 ways this could happen:  Either the recursive calls return an incorrect result, or the checking the two halves of the list against each other is incorrect.
        Base case:  The only way the recursive calls could be incorrect is if the base case (when no more recursion is needed) is wrong.  In this case, that is when the list has 0 or 1 elements.  A single element obviously cannot have any inversions, and our code returns that.
        The other case is if our code that brute-forces the halves was incorrect, or missed some numbers:  Our algorithm simply does a brute-force on the entire range where i is in the first half, and j is in the second half.  The recursive calls take care of where i and j are in the same half, so all the bases are covered here.  We can assume that brute-forcing those numbers is correct, since this was talked about extensively in class, and is logically sound. (merely comparing every i with every j for any inversions)
